//  This file is written in a version of Lambda-JS designed for ES5.
//  It is parsed and used as the initial environment for desugared
//  JavaScript source.  It implements several built-in objects
//  (Chapter 15 of the specification), and also numerous other
//  functions defined in the spec, including type conversions and the
//  expansion of implicit behaviors in operators like +.  There are
//  also implementations of functions that exhibit the object model of
//  ES5, like defineProperty and getOwnPropertyDescriptor



let [[Object_prototype]] = {[extensible: true, class: "Object", proto: null]}
let [[global]] = {[extensible: true, class: "LambdaJS global", proto: null]}
let [[Function_prototype]] = {[extensible: true, class: "Object", proto: Object_prototype]}
let [[String_prototype]] = {[extensible: true, class: "Object", proto: Object_prototype]}
let [[Array_prototype]] = {[extensible: true, class: "Object", proto: Object_prototype]}


let [[toBoolean]] = func(x) {
    return
    if (typeof x === "undefined") {
	false
    }
    else if (typeof x === "null") {
	false
    }
    else if (typeof x === "boolean") {
	x
    }
    else if (typeof x === "number") {
	x !== 0 && x !== NaN
    }
    else if (typeof x === "string") {
	x !== ""
    }
    else { /* Object */
	true
    }
}

// 9.8, but uses 8.12.8: [[DefaultValue]] hint "string"
let [[ToString]] = func(obj) {
    return
    if(prim("primitive?", obj)) {
	prim("prim->str", obj)
    } 
    else {
	let (ts = obj["toString"])
	if (prim("is-callable", ts)) {
	    let (str = ts(obj, {[]}))
	    if (prim("primitive?", str)) {
		prim("prim->str",str)
	    }
	} 
	else {
	    let (vo = obj["valueOf"])
	    if (prim("is-callable", vo)) {
		let (val = vo(obj, {[]}))
		if (prim("primitive?", val)) {
		    prim("prim->str",val)
		}
	    } 
	    else {
		throw "TypeError"
	    }
	}
    }
}

// 9.3, but uses 8.12.8: [[DefaultValue]] hint "number"
let [[ToNumber]] = func(obj) {
    return
    if(prim("primitive?", obj)) {
	prim("prim->num", obj)
    } 
    else {
	let (vo = obj["valueOf"])
	if (prim("is-callable", vo)) {
	    let (val = vo(obj, {[]}))
	    if (prim("primitive?", val)) {
		prim("prim->num",val)
	    }
	} 
	else {
	    let (ts = obj["toString"])
	    if (prim("is-callable", ts)) {
		let (str = ts(obj, {[]}))
		if (prim("primitive?", str)) {
		    prim("prim->num",str)
		}
	    } 
	    else {
		throw "TypeError"
	    }
	}
    }
}

let [[ToInteger]] = func (n) {
    return prim("to-int32", ToNumber(n))
}

let [[ToUInt]] = func (n) { 
    return prim("to-int32", ToNumber(n))
}

let [[Object_prototype]] = 
    {[proto: null, extensible: true, class: "Object"]
     toString: {#value: function() { return prim("object-to-string", this) }}}

let [[Function_prototype]] = 
    {[proto: Object_prototype, extensible: true, class: "Function"]}

// 15.11.2
let [[Error]] = 
    {[proto: Function_prototype]}

// 15.11.4
let [[Error_prototype]] = 
    {[class: "Error", proto: Object_prototype, extensible: false]
     name: {#value: "Error",
	    #configurable: false,
	    #writable: false,
	    #enumerable: false },
     constructor: {#value: Error,
		   #configurable: false,
		   #writable: false,
		   #enumerable: false },
     message: {#value: "",
     	       #configurable: false,
	       #writable: false,
	       #enumerable: false },
     toString: {#value: function() { return ToString(this["message"]) }}
     //	have to define toString later, since there is a recursive
     //	dependency with TypeError
    }

// 15.11.7.7-10
let [[makeNativeErrorPrototype]] = func(constr, name_str) {
    return {[proto: Error_prototype,
	     class: "Error",
	     extensible: false]
	    constructor: {#value: constr,
			  #configurable: false,
			  #writable: false,
			  #enumerable: false},
	    name: {#value: name_str,
		   #configurable: false,
		   #writable: false,
		   #enumerable: false},
	    message: {#value: "",
		   #configurable: false,
		   #writable: true,
		   #enumerable: false}}
}


let [[TypeError_prototype]] = 
    {[]
     toString: {#value: function() {
	 return ToString(this["message"])
     }}}

let [[TypeError]] = function(msg) {
    return
    let (obj =
	 {[class: "Error", proto: TypeError_prototype, extensible: true]})
    if(msg === undefined) {
	obj
    }
    else {
	obj["message" = ToString(msg)];
	obj
    }
}

let [[type_error]] = func(msg) {
    return TypeError(undefined, {[] "0": {#value: msg}})
}

// Use internally to call function objects that take no arguments
let [[CallNoArgs]] = func(f) { return f(undefined, {[]}) }

{
    TypeError_prototype := makeNativeErrorPrototype(TypeError, "TypeError");
    TypeError["prototype" = TypeError_prototype]
}

// Algorithm 9.9 of ECMA-262, ed. 3.
let [[toObject]] = func (x) {
  return if (typeof x === "undefined") {
    throw type_error("toObject given undefined")
  }
  else if (typeof x === "null") {
    throw CallNoArgs(TypeError)
  }
  else if (typeof x === "boolean") {
      { [proto: "Boolean_prototype",
         class: "Boolean"]
	value: {#value: x,
		#enumerable: true,
		#configurable: true,
		#writable: true}}
  }
  else if (typeof x === "number") {
      { [proto: "Number_prototype",
         class: "Number"]
	value: {#value: x,
		#enumerable: true,
		#configurable: true,
		#writable: true}}
  }
  else if (typeof x === "string") {
      { [proto: "String_prototype",
         class: "String"]
	value: {#value: x,
		#enumerable: true,
		#configurable: true,
		#writable: true}}
  }
  else {
    x
  }
}



let [[print]] = function(s) {
    return 
    prim("print",ToString(s));
    undefined
}

let [[getPrototypeOf]] = function(obj) {
    return
    if (typeof obj !== "object") {
	throw CallNoArgs(TypeError)
    }
    else {
	prim("get-proto", obj)
    }
}

// Not the make args array of the spec.  Used internally to make
// arguments lists from array-like objects
let [[mkArgsArray]] = func(alist) {
    return
    let (arr = {[extensible: true, proto: Object_prototype, class: "Arguments"]})
    let (len = alist["length"])
    let (add_arg = 
	 fix aa func(ar-acc, curr-index) {
	     return 
	     if (curr-index === len) { ar-acc } 
	     else { 
		 let (nextval = alist[curr-index])
		 ar-acc[curr-index = nextval];
		 aa(ar-acc, prim("+", curr-index, 1))
	     }
	 })
    add_arg(arr, 0)
}

let [[call]] = function(thisarg) {
    return this(thisarg, args)
}

// 15.3.4.2
let [[apply]] = function(thisarg, arglist) {
    return 
    if (arglist === undefined || arglist === null) {
	this(thisarg, mkArgsArray({[]}))
    }
    else if (typeof arglist !== "object") {
	throw CallNoArgs(TypeError)
    }
    else {
	let (len = arglist["length"])
	if (len === null || len === undefined) {
	    throw CallNoArgs(TypeError)
	}
	else {
	    let (n = ToUInt(len))
	    if (ToNumber(len) !== n) {
		throw CallNoArgs(TypeError)
	    }
	    else {
		this(thisargs, mkArgsArray(arglist))
	    }
	}
    }
}

let [[create]] = function(proto) {
    return
    {[proto: proto,
      extensible: true,
      class: "Object"]}
}

let [[Object]] = 
    {[proto: Object_prototype, 
      extensible: true, 
      class: "Function",
      code: undefined]
     prototype: {#value: Object_prototype,
		 #writable: false,
		 #enumerable: false,
		 #configurable: false},
     getPrototypeOf: {#value: getPrototypeOf,
		      #writable: false,
		      #configurable: false,
		      #enumerable: false},
     create: {#value: create,
	      #writable: false,
	      #configurable: false,
	      #enumerable: false}}

let [[eval]] = function(s) { return throw "We do not account for eval." }

let [[global]] = { [proto: null, class: "Lambda-JS global", extensible: true]
		   "NaN": {#value: NaN,
			   #writable: false,
			   #enumerable: false,
			   #configurable: false},
		   "Infinity":  {#value: +inf,
				 #writable: false,
				 #enumerable: false,
				 #configurable: false},
		   "undefined": {#value: undefined,
				 #writable: false,
				 #enumerable: false,
				 #configurable: false},
		   "print": {#value: print},
		   "Object" : {#value: Object},
		   "Object_prototype" : {#value: Object_prototype},
		   "Function_prototype" : {#value: Function_prototype},
		   "Array_prototype" : {#value: Array_prototype},
		   "eval" : {#value: eval},
		   "TypeError" : {#value: TypeError}
		 }


{
    global["window" = global]
}


let [[isDataField]] = func(obj, field) {
    return ((obj[field<#value>] !== undefined) ||
	    (obj[field<#writable>] !== undefined))
}

let [[isAccessorField]] = func(obj, field) {
    return ((obj[field<#setter>] !== undefined) ||
	    (obj[field<#getter>] !== undefined))
}

let [[isGenericField]] = func(obj, field) {
    return (isDataField(obj, field) === false &&
	    isAccessorField(obj, field) === false)
}

let [[isDataDescriptor]] = func(attr-obj) {
    return (typeof (attr-obj["value"]) !== "undefined" ||
	    typeof (attr-obj["writable"]) !== "undefined")
}

let [[isAccessorDescriptor]] = func(attr-obj) {
    return (typeof (attr-obj["set"]) !== "undefined" ||
	    typeof (attr-obj["get"]) !== "undefined")
}

let [[isGenericDescriptor]] = func(attr-obj) {
    return (isAccessorDescriptor(attr-obj) === false &&
	    isDataDescriptor(attr-obj) === false)
}

let [[copy-when-defined]] = func(obj1, obj2, s) {
    return
    if(obj2[s] !== undefined) {
	obj1[s = obj2[s] ]
    }
    else { undefined }
}

let [[copy-data-desc]] = func(obj1, obj2) {
    return
    copy-when-defined(obj1, obj2, "configurable");
    copy-when-defined(obj1, obj2, "enumerable");
    copy-when-defined(obj1, obj2, "writable");
    copy-when-defined(obj1, obj2, "value");
    obj1[delete "get"];
    obj1[delete "set"]

}

let [[copy-access-desc]] = func(obj1, obj2) {
    return
    copy-when-defined(obj1, obj2, "configurable");
    copy-when-defined(obj1, obj2, "enumerable");
    copy-when-defined(obj1, obj2, "set");
    copy-when-defined(obj1, obj2, "get");
    obj1[delete "value"];
    obj1[delete "writable"]
}

/* 8.12.9 */
let [[defineOwnProperty]] = func(obj, field, attr-obj) {
    return
    if (typeof obj !== "object") { throw type_error("defineOwnProperty didn't get object") }
    else {
	let (fstr = ToString(field))
	if (prim("has-own-property?", obj, fstr) === false) {
	    if (prim("is-extensible", obj)) {
		// Do this to open it up for the other properties (will set these last)
		obj[field<#configurable> = true];
		obj[field<#writable> = true];

		{if(isDataDescriptor(attr-obj)) {
		    obj[field<#value> = attr-obj["value"] ];
		    obj[field<#writable> = attr-obj["writable"] ]
		}
		else if(isAccessorDescriptor(attr-obj)) {
		    obj[field<#getter> = attr-obj["get"] ];
		    obj[field<#setter> = attr-obj["set"] ]
		}
		 else { undefined }};

		obj[field<#enumerable> = attr-obj["enumerable"] ];
		obj[field<#configurable> = attr-obj["configurable"] ];
		true
	    }
	    else { throw type_error("(defineOwnProperty) Attempt to add a property to a non-extensible object.") }
	}
	else { /* it definitely has the property */
	    if (obj[field<#configurable>] === false) {
		if (attr-obj["configurable"] === true) {
		    throw type_error("escalating configurable from false to true")
		}
		else {
		    if(attr-obj["enumerable"] ===
		       (obj[field<#enumerable>] === false)) {
			throw type_error("(defineOwnPoperty) Can't change enumerable of a non-configurable property")
		    }
		}
	    };
	    
	    {if ((isDataDescriptor(current-prop)) !== (isDataDescriptor(attr-obj))) {
		if (obj[field<#configurable>] === false) {
		    throw type_error("(defineOwnProperty) Non-configurable property")
		}
		else {
		    if (isDataDescriptor(current)) {
			copy-data-desc(current-obj, attr-obj)
		    }
		    else {
			copy-access-desc(current-obj, attr-obj)
		    }
		}
	    }
	    else if ((isDataDescriptor(current-prop)) && 
		     (isDataDescriptor(attr-obj))) {
		if (current-prop["configurable"] === false) {
		    if (current-prop["writable"] === false) {
			if (attr-obj["writable"] === true) {
			    throw type_error("(defineOwnProperty) Cannot escalate writable from false to true.")
			}
			else {
			    if (attr-obj["value"] !== current-prop["value"]) {
				throw type_error("(defineOwnProperty) Cannot change a non-configurable value")
			    }
			    else { copy-data-desc(current-prop, attr-obj) }
			}
		    }
		    else { copy-data-desc(current-prop, attr-obj) }
		}
		else { copy-data-desc(current-prop, attr-obj) }
	    }
	    else {
		if (current-prop["configurable"] === false) {
		    if (current-prop["set"] !== attr-obj["set"] ||
			current-prop["get"] !== attr-obj["get"]) {
			throw type_error("(defineOwnProperty) Cannot change setter or getter of non-configurable property.")
		    }
		    else { copy-access-desc(current-prop, attr-obj) }
		}
		else { copy-access-desc(current-prop, attr-obj) }
	    }};

	    if(isDataDescriptor(current-prop)) {
		obj[field<#value> = current-prop["value"] ];
		obj[field<#writable> = current-prop["writable"] ]
	    }
	    else if(isAccessorDescriptor(current-prop)) {
		obj[field<#getter> = current-prop["get"] ];
		obj[field<#setter> = current-prop["set"] ]
	    }
	    else { undefined };
	    
	    obj[field<#enumerable> = current-prop["enumerable"] ];
	    obj[field<#configurable> = current-prop["configurable"] ];

	    true
	}
    }
}


let [[newObject]] = func() {
    return
    let (newObj = {[proto: Object, extensible: true, class: "Object"]})
    Object(newObj)
}


let [[getOwnPropertyDescriptor]] = func(obj, field) {
    return
    let (fstring = ToString(field))
    if (typeof obj !== "object") { throw type_error("getOwnPD didn't get object") }
    else {
	if(isDataField(obj, field)) {
	    {[proto: Object, extensible: true]
	     value: {#value: obj[field<#value>]},
	     writable: {#value: obj[field<#writable>]},
	     enumerable: {#value: obj[field<#enumerable>]},
	     configurable: {#value: obj[field<#configurable>]}}
	}
	else if(isAccessorField(obj, field)) {
	    {[proto: Object, extensible: true]
	     get: {#value: obj[field<#getter>]},
	     set: {#value: obj[field<#setter>]},
	     enumerable: {#value: obj[field<#enumerable>]},
	     configurable: {#value: obj[field<#configurable>]}}
	} else {
	    {[proto: Object, extensible: true]
	     enumerable: {#value: obj[field<#enumerable>]},
	     configurable: {#value: obj[field<#configurable>]}}
	}
    }
}

{
    // 15.2.3.6, and 8.10.5
    // This does all of the sanity checks about the property object,
    // then defers to the primitive delta operation define_property
    Object["defineProperty" =
	   function(obj, field, propobj) {
	       return
	       /* 8.10.5 checks */

	       if ((typeof obj) !== "object") {
		   throw type_error("defineProperty didn't get object")
	       }
	       else {
		   let (attrobj = {[extensible: true]})
		   let (enumerable = propobj["enumerable"])
		   {if ((typeof enumerable) !== "undefined") {
		       attrobj["enumerable" = enumerable]
		   }
		   else { attrobj }};

		   let (configurable = propobj["configurable"])
		   {if ((typeof configurable) !== "undefined") {
		       attrobj["configurable" = configurable]
		   }
		   else { attrobj }};
		   
		   let (writable = propobj["writable"])
		   {if ((typeof writable) !== "undefined") {
		       attrobj["writable" = writable]
		   }
		   else { attrobj }};
		   
		   let (value = propobj["value"])
		   {if ((typeof value) !== "undefined") {
		       attrobj["value" = value]
		   }
		   else { attrobj }};
		   
		   let (get = propobj["get"])
		   {if ((typeof get) !== "undefined" && 
			(prim("surface-typeof", get) !== "function")) {
		       throw type_error("defineProperty given a non-function getter")
		   }
		   else {
		       attrobj["get" = get]
		   }};
		   
		   let (set = propobj["set"])
		   {if (typeof set !== "undefined" && 
			(prim("surface-typeof", set) !== "function")) {
		       throw type_error("defineProperty given a non-function setter")
		   }
		   else {
		       attrobj["set" = set]
		   }};

		   // 8.10.5, step 9
		   if (isDataDescriptor(attrobj) && isAccessorDescriptor(attrobj)) {
		       throw type_error("The attributes given to defineProperty were inconsistent")
		   }
		   else {
		       defineOwnProperty(obj, field, attrobj)
		   }
	       }	   
	   }]
}

{
    Object["getOwnPropertyDescriptor" = 
	   function(obj, field) { return getOwnPropertyDescriptor(obj,field) }]
}

{
    Object_prototype["hasOwnProperty" =
		     function(fname) {
			 return prim("has-own-property?", this, fname)
		     }]
}

let [[instanceof]] = func(obj1, obj2) {
    return
    if(typeof obj1 !== "object") {
	throw CallNoArgs(TypeError)
    }
    else {
	let (o = obj2["prototype"])
	if (typeof o !== "object") {
	    throw CallNoArgs(TypeError)
	}
	else {
	    let (repeat = fix rep func(proto) {
		return
		if (proto !== o) {
		    rep(prim("get-proto", proto))
		}
		else {
		    true
		}
	    })
	    repeat(prim("get-proto", obj1))
	}
    }
}

let [[toPrimitive]] = func(val, hint) {
    return
    if (prim("primitive?",val)) {
	val
    }
    else if (hint === "string") {
	ToString(val)
    }
    else {
	ToNumber(val)
    }
    // TODO: special case for Date
}

// 11.6.1
let [[plus]] = func(arg1, arg2) {
    return
    let (lval = toPrimitive(arg1, undefined))
    let (rval = toPrimitive(arg2, undefined))
    if (typeof lval === "string" || typeof rval === "string") {
	prim("string+", ToString(lval), ToString(rval))
    }
    else {
	prim("+", ToNumber(lval), ToNumber(rval))
    }
}

let [[hasProperty]] = func(obj, field) {
    return if (typeof obj !== "object") {
	CallNoArgs(TypeError)
    }
    else {
	prim("has-property", obj, ToString(field))
    }
}

let [[in]] = func(obj, field) {
    return hasProperty(obj, field)
}


{
    global["hasProperty" = has_property]
}

// Object (\String -> Any) -> Object
// Calls the function with the object and each own property name in
// the order returned from "own-property-names"
let [[forobj]] = func(obj, fun) {

    return
    let (propnames = prim("own-property-names", obj))
    let (iter = fix iter func(obj, i) {
	return
	let (curr = propnames[ToString(i)])
	if (curr === undefined) {
	    obj
	}
	else {
	    fun(obj, curr);
	    iter(obj, prim("+",i,1))
	}
    })
    iter(obj,0)

}

// Used for both freeze and seal, which are quite similar
let [[sf]] = func(obj, f) {
    return
    if(typeof obj !== "object") {
	throw type_error("Freeze/seal given non-object")
    }
    else {
	prim("prevent-extensions", obj);
	forobj(obj, f)
    }
}

// 15.2.3.8
let [[sealfun]] = func(obj, name) {
    return

    obj[name<#configurable> = false]

}

// 15.2.3.9
let [[freezefun]] = func(obj, name) {
    return

    obj[name<#writable> = false];
    obj[name<#configurable> = false]
}

{
    Object["seal" = function(obj) {
	return sf(obj, sealfun)
    }];

    Object["freeze" = function(obj) {
	return sf(obj, freezefun)
    }]
}

// **************************************************
// Arrays (15.4)
// **************************************************
let [[Array_prototype]] = {[proto: Object_prototype, extensible: true, class: "Array"]}

let [[array-set]] = func(array-object, element-list) {
    return forobj(element-list,
		  func(obj, name) {
		      return
		      if(ToString(ToNumber(name)) === name) {
			  let(element = element-list[name])
			  array-object[name = element]
		      } else { undefined }
		  })
}

let [[make-length-getter-setter]] = func() {
    return
    let (possibly-larger-length = 0) 

    // get the largest numeric property among the elements of array
    let (length-getter = func(array) {
	return
	let (max = 0)
	let (iter-func = func(arr-obj, name)  {
	    return
	    let(num = ToUInt(name))
	    if((ToString(num) === name) && // definition of an array index (15.4)
	       prim(">", num, max)) {
		    max := num
	    } else {undefined}
	})
	forobj(array, iter-func);
	let (len = prim("+",max,1))

	// If the length has been set longer, return that
	if(prim("<", len, possibly-larger-length)) {
	    possibly-larger-length
	}
	else {
	    len
	}
    })

    // Inspired by 15.4.5.1, but not exactly the same
    let (length-setter = func(array, len) {
	return
	let (int32len = ToUInt(len))
	if (if(prim("abs=",int32len,(ToNumber(len)))) false else true) { throw "RangeError" }
	else { 
	    // Use the getter to figure out what the current length should be
	    let (curr-len = length-getter(array))
	    if (prim(">=", int32len, curr-len)) {
		possibly-larger-length := int32len
	    }
	    else {
		// keep deleting until we can't, or we're down to the new length
		let (iter-func = func(ix) {
		    return
		    if (prim("<", int32len, ix) && array[delete ToString(ix)]) {
			    iter-func(prim("-",ix,1))
		    }
		    else {undefined}
		})
		iter-func(curr-len)
	    }
	}
    })

    {[] "length-getter": {#value: function() { return length-getter(this) }},
	"length-setter": {#value: function(len) { return length-setter(this, len) }}}
}

// 15.4.4.5
let [[array-join]] = func(array, sep) {
    return
    let (array = toObject(array))
    let (len = ToUInt(array["length"]))
    let (sep = (if (sep === undefined) "," else ToString(sep)))
    if (len === 0) { "" }
    else {
	let (el0 = array["0"])
	let (R = if ((el0 === null) || (el0 === undefined)) "" else ToString(el0))
	let (iter-func = fix iter-func func(k, R1) {
	    return
	    if(prim("<=", len, k)) { R1 }
	    else {
		let (S = prim("string+", R1, sep))
		let (el = array[ToString(k)])
		let (next = (if ((el === null) || (el === undefined)) "" else ToString(el)))
		iter-func(prim("+", k, 1), prim("string+", S, next))
	    }
	})
	iter-func(1, R)
    }
}

let [[max]] = func(n1, n2) {
    return
    if(prim(">", n1, n2)) n1 else n2
}

let [[min]] = func(n1, n2) {
    return
    if(prim(">", n1, n2)) n2 else n1
}

let [[Array]] = function(len) {
    return
    let (getter-setter = make-length-getter-setter())
    let (arr-obj = {[proto: Array_prototype,
		     class: "Array",
		     extensible: true]
		    length: {#getter: getter-setter["length-getter"],
			     #setter: getter-setter["length-setter"],
			     #configurable: false,
			     #enumerable: false}})
    arr-obj
}

let [[array-slice]] = func(array, start, end) {
    return
    let (O = toObject(array))
    let (A = CallNoArgs(Array))
    let (lenVal = O["length"])
    let (len = ToUInt(lenVal))
    let (relativeStart = ToInteger(start))
    let (k = (if (prim("<",relativeStart,0)) 
	      { max(prim("+", len, relativeStart), 0) }
	      else
	      { min(relativeStart, len) }))
    let (relativeEnd = (if (end === undefined)
			{ len }
			else
			{ ToInteger(end) }))
    let (final = (if (prim("<", relativeEnd, 0))
		  { max(prim("+", len, relativeEnd), 0) }
		  else
		  { min(relativeEnd, len) }))
    let (iter-func = fix iter-func func(k, n) {
	return
	if (prim("<", k, final)) {
	    let (Pk = ToString(k))
	    if (prim("has-property?", O, Pk))
	    { A[ToString(n) = O[Pk] ];
	      iter-func(prim("+", k, 1), prim("+", n, 1)) }
	    else
	    { iter-func(prim("+", k, 1), prim("+", n, 1)) }
	}
	else { undefined }
    })
    iter-func(k, 0);
    A
}

{
    Array["isArray" = function(maybeArray) {
	return (typeof maybeArray === "object") && prim("is-array", maybeArray)
    }];

    Array_prototype["join" = function(separator) {
	return array-join(this, separator)
    }];

    Array_prototype["toString" = function() {
	return this["join"](",")
    }];

    Array_prototype["slice" = function(start, end) { 
	return array-slice(this, start, end) 
    }]

}

{
    global["Array" = Array]
}